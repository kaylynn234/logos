(function() {var implementors = {};
implementors["logos"] = [{"text":"impl&lt;C, T, E&gt; Freeze for <a class=\"enum\" href=\"logos/callback/enum.Output.html\" title=\"enum logos::callback::Output\">Output</a>&lt;C, T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":["logos::callback::Output"]},{"text":"impl Freeze for <a class=\"struct\" href=\"logos/error/struct.UnknownToken.html\" title=\"struct logos::error::UnknownToken\">UnknownToken</a>","synthetic":true,"types":["logos::error::UnknownToken"]},{"text":"impl&lt;'source, Token, Item&gt; Freeze for <a class=\"struct\" href=\"logos/iter/struct.BoxedLexer.html\" title=\"struct logos::iter::BoxedLexer\">BoxedLexer</a>&lt;'source, Token, Item&gt;","synthetic":true,"types":["logos::iter::BoxedLexer"]},{"text":"impl&lt;'source, L, F&gt; Freeze for <a class=\"struct\" href=\"logos/iter/struct.MapWithLexer.html\" title=\"struct logos::iter::MapWithLexer\">MapWithLexer</a>&lt;'source, L, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":["logos::iter::MapWithLexer"]},{"text":"impl&lt;'source, L&gt; Freeze for <a class=\"struct\" href=\"logos/iter/struct.Lookahead.html\" title=\"struct logos::iter::Lookahead\">Lookahead</a>&lt;'source, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;L as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.59.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.59.0/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\" title=\"type core::iter::traits::iterator::Iterator::Item\">Item</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["logos::iter::Lookahead"]},{"text":"impl&lt;'source, Token&gt; Freeze for <a class=\"struct\" href=\"logos/struct.Lexer.html\" title=\"struct logos::Lexer\">Lexer</a>&lt;'source, Token&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Token: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Token as <a class=\"trait\" href=\"logos/trait.Logos.html\" title=\"trait logos::Logos\">Logos</a>&lt;'source&gt;&gt;::<a class=\"associatedtype\" href=\"logos/trait.Logos.html#associatedtype.Error\" title=\"type logos::Logos::Error\">Error</a>: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Token as <a class=\"trait\" href=\"logos/trait.Logos.html\" title=\"trait logos::Logos\">Logos</a>&lt;'source&gt;&gt;::<a class=\"associatedtype\" href=\"logos/trait.Logos.html#associatedtype.Extras\" title=\"type logos::Logos::Extras\">Extras</a>: Freeze,&nbsp;</span>","synthetic":true,"types":["logos::lexer::Lexer"]},{"text":"impl Freeze for <a class=\"struct\" href=\"logos/struct.Skip.html\" title=\"struct logos::Skip\">Skip</a>","synthetic":true,"types":["logos::Skip"]},{"text":"impl&lt;C&gt; Freeze for <a class=\"enum\" href=\"logos/enum.Filter.html\" title=\"enum logos::Filter\">Filter</a>&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":["logos::Filter"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()