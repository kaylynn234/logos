initSidebarItems({"derive":[["Logos",""]],"enum":[["Filter","A type that can be used within callbacks to either produce a field for a token or skip a token match."]],"fn":[["skip","A predefined callback that unconditionally skips a token match."]],"mod":[["callback","Types and traits used within lexer callbacks."],["error","Types and traits for error handling in Logos."],["iter","Tools for working with lexers as iterators."],["source","Traits for reading from different input sources."]],"struct":[["Lexer","A `Lexer` allows you to read through a source (a type implementing the [Source] trait, like a string slice) and produce tokens using the [Logos] trait. It’s important to note that you should not implement [Logos] yourself, and should always use the derive macro instead. See the [trait’s documentation][Logos] for more details."],["Skip","Used within callbacks to instruct the lexer to skip a token match."]],"trait":[["LexerExt","Extension methods for types that contain a [Lexer]."],["Logos","Types that can be lexed using [Lexer]."]],"type":[["Span","A byte range in the source."]]});